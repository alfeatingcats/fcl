// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    sessions  Session[]
    accounts  Account[]
    studyItem StudyItem[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StudyItem {
    id          String  @id @default(cuid())
    title       String
    description String?
    status      Status  @default(IN_PROGRESS)

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    completedAt DateTime?

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    repetitions StudyRepetition[]
    itemTags    StudyItemTag[]

    @@index([createdById])
    @@index([status])
    @@index([createdAt])
    @@index([title])
}

enum Status {
    IN_PROGRESS
    COMPLETED
    PAUSED
    ARCHIVED
}

model StudyRepetition {
    id               String           @id @default(cuid())
    repetitionNumber Int
    scheduledAt      DateTime
    completedAt      DateTime?
    status           RepetitionStatus @default(PENDING)

    difficulty Int?

    studyItem   StudyItem @relation(fields: [studyItemId], references: [id], onDelete: Cascade)
    studyItemId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([studyItemId, repetitionNumber])
    @@index([studyItemId])
    @@index([scheduledAt])
    @@index([status])
}

model Tag {
    id    String  @id @default(cuid())
    name  String  @unique
    color String?

    createdAt DateTime @default(now())

    itemTags StudyItemTag[]
}

model StudyItemTag {
    studyItem   StudyItem @relation(fields: [studyItemId], references: [id], onDelete: Cascade)
    studyItemId String

    tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId String

    createdAt DateTime @default(now())

    @@id([studyItemId, tagId])
}

enum RepetitionStatus {
    PENDING
    COMPLETED
    MISSED
    SKIPPED
}
